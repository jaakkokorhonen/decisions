from __future__ import absolute_import, unicode_literals
"""
Django settings for decisions project.

Generated by 'django-admin startproject' using Django 1.9.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pjqe_zw4qxc52*m+=_4(2w))m!5d6ur%=e@dl7w%#g4$u7pf!e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # second party apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.sites',
    'django.contrib.gis',

    # third party apps
    'haystack',
    'tagging',
    'sitemetrics',

    # first party apps
    'decisions.ahjo',
    'decisions.subscriptions',
    'decisions.comments',
    'decisions.news',
    'decisions.geo',
]


MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'decisions.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "decisions", "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'decisions.subscriptions.context_processors.metrics',
            ],
        },
    },
]

WSGI_APPLICATION = 'decisions.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'helsinkidecisions',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = [
    'decisions.subscriptions.backends.EmailModelBackend'
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

_ = lambda s: s

LANGUAGE_CODE = 'fi'
LANGUAGES = (
    ('fi', _('Finnish')),
)

TIME_ZONE = 'Europe/Helsinki'

USE_I18N = True

USE_L10N = True

USE_TZ = True
LOCALE_PATHS = [
    os.path.join(BASE_DIR, "decisions", "locale")
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "decisions", "static"),
]

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh.idx'),
    },
}

DEFAULT_FROM_EMAIL = "noreply@example.com"
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
SITE_URL = os.environ.get("SITE_URL", "http://localhost:8000")
SITE_NAME = "Decisions"
LOGIN_URL = "/account/login/"

BROKER_URL = 'redis://localhost:6379/10'

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': [
            'localhost:6379'
        ],
        'OPTIONS': {
            'DB': 11,
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
            'MAX_CONNECTIONS': 1000,
            'PICKLE_VERSION': -1,
        },
    },
}

# Set up logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': []
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}

# Celery
from celery.schedules import crontab

CELERY_TIMEZONE = "Europe/Helsinki"
CELERYBEAT_SCHEDULE = {
    # Update the database and index frequently
    "fetch-index": {
        'task': 'decisions.ahjo.tasks.fetch_index',
        'schedule': crontab(minute=5),
    },
    # Update geoindex about as frequently as new data is fetched
    "geoindex": {
        'task': 'decisions.geo.tasks.update_geoindex',
        'schedule': crontab(minute=10),
    },
    # Send email reasonably infrequently
    "process": {
        'task': 'decisions.ahjo.tasks.process',
        'schedule': crontab(hour=11, minute=45)
    }
}
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = "json"

# Tagging
FORCE_LOWERCASE_TAGS = True


if "DATABASE_URL" in os.environ:
    # Heroku database integration
    import dj_database_url
    db_from_env = dj_database_url.config(conn_max_age=60)
    DATABASES['default'].update(db_from_env)

if "MAILGUN_SMTP_SERVER" in os.environ:
    # Heroku Mailgun integration
    DEFAULT_FROM_EMAIL = "noreply@cryptic-earth-25359.herokuapp.com"
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ["MAILGUN_SMTP_SERVER"]
    EMAIL_PORT = os.environ["MAILGUN_SMTP_PORT"]
    EMAIL_USER = os.environ["MAILGUN_SMTP_USER"]
    EMAIL_PASSWORD = os.environ["MAILGUN_SMTP_PASSWORD"]

SITE_ID = 1
